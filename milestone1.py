# -*- coding: utf-8 -*-
"""milestone1

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DGV-PVmVetWG9PfMqqaPI5OE_DhGVE4a
"""

#s(dna) code from lab03
def dna_count(dna):
    dna = dna.upper()
    count_A = dna.count('A')
    count_C = dna.count('C')
    count_G = dna.count('G')
    count_T = dna.count('T')
    return count_A,count_C,count_G,count_T

#dna2rna(dna) code, part was from lab03
def dna2rna(dna):
    rna = ''
    for symbol in dna:
        if symbol == 'A':
            rna = rna + 'A'
        elif symbol == 'T':
            rna += 'U'
        elif symbol == 'G':
            rna += 'G'
        elif symbol == 'C':
            rna += 'C'
    return rna

#reverse_complement(dna) code, part was from lab03
def rna2dna(rna):
    dna = ''
    for symbol in rna:
        if symbol =='A':
            dna = dna + 'T'
        elif symbol == 'C':
            dna = dna + 'G'
        elif symbol == 'G':
            dna = dna + 'C'
        elif symbol == 'U':
            dna = dna +'A'
        elif symbol == 'T':
            dna = dna + 'A'
    return dna[::-1]

#mendels_law(hom, het, rec) code
def mendels_law(x, y, z):
    total = x + y + z
    twoRecessesive = (z / total) * ((z - 1) / (total - 1))
    twoHeterozygous = (y / total) * ((y - 1) / (total - 1))
    heterozygousRecessesive = (z / total) * (y / (total-1)) + (y / total) * (z / (total - 1))
    recessesiveProb = twoRecessesive + twoHeterozygous * (1 / 4) + heterozygousRecessesive * (1 / 2)
    return 1 - recessesiveProb

print(mendels_law(4,0,2))

#fibonacci_rabbits(n, k) code
def fibonacci_rabbits(n,k):
    if n <= 2:
        return 1
    else:
        return (fibonacci_rabbits(n - 1,k) + fibonacci_rabbits(n - 2,k) * k)
print(fibonacci_rabbits(1, 3))
print(fibonacci_rabbits(5,3))

def gc_content(dna_list):
  max=0
  index=-1
  for i in range(len(dna_list)):
    count=0
    for j in range(len(dna_list[i])):
      if(dna_list[i][j]=='G'or dna_list[i][j]=='C'):
        count+=1
    gc_con=(count/len(dna_list[i]))*100.0
    if(gc_con>max):
      index=i
      max=gc_con
  return (index,max)
dna_list=["CCTGCGGAAGATCGGCACTAGAATAGCCAGAACCGTTTCTCTGAGGCTTCCGGCCTTCCCTCCCACTAATAATTCTGAGG",
 "CCATCGGTAGCGCATCCTTAGTCCAATTAAGTCCCTATCCAGGCGCTCCGCCGAAGGTCTATATCCATTTGTCAGCAGACACGC",
 "CCACCCTCGTGGTATGGCTAGGCATTCAGGAACCGGAGAACGCTTCAGACCAGCCCGGACTGGGAACCTGCGGGCAGTAGGTGGAAT"]
print(gc_content(dna_list))

def rna2condon(rna):
  table={"UUU":"F", "UUC":"F", "UUA":"L", "UUG":"L",
    "UCU":"S", "UCC":"s", "UCA":"S", "UCG":"S",
    "UAU":"Y", "UAC":"Y", "UAA":"STOP", "UAG":"STOP",
    "UGU":"C", "UGC":"C", "UGA":"STOP", "UGG":"W",
    "CUU":"L", "CUC":"L", "CUA":"L", "CUG":"L",
    "CCU":"P", "CCC":"P", "CCA":"P", "CCG":"P",
    "CAU":"H", "CAC":"H", "CAA":"Q", "CAG":"Q",
    "CGU":"R", "CGC":"R", "CGA":"R", "CGG":"R",
    "AUU":"I", "AUC":"I", "AUA":"I", "AUG":"M",
    "ACU":"T", "ACC":"T", "ACA":"T", "ACG":"T",
    "AAU":"N", "AAC":"N", "AAA":"K", "AAG":"K",
    "AGU":"S", "AGC":"S", "AGA":"R", "AGG":"R",
    "GUU":"V", "GUC":"V", "GUA":"V", "GUG":"V",
    "GCU":"A", "GCC":"A", "GCA":"A", "GCG":"A",
    "GAU":"D", "GAC":"D", "GAA":"E", "GAG":"E",
    "GGU":"G", "GGC":"G", "GGA":"G", "GGG":"G",}
  protein=""
  if len(rna)%3==0:
    for i in range(0,len(rna),3):
      condon=rna[i:i+3]
      if table[condon]!="STOP":
        protein+=table[condon]
  return protein

def locate_substring(dna_snippet, dna):
  i=0
  
locate_substring('ATAT','GATATATGCATATACTT')

#hamming distance
def hamming_dist(dna1,dna2):
    i=0
    dist=0
    
    while i<len(dna1):
        if dna1[i]!=dna2[i]:
            dist=dist+1
        i=i+1 
        
    return dist
 
str1=input("Enter dna1:")
str2=input("enter dna2:")
print(hamming_dist(str1,str2))

def count_dom_phenotype(genotypes):
  offspring=0
  n=1
  for couples in genotypes:
    if n<=3:
      offspring+=couples*2
      n+=1
    elif n==4:
      offspring+=couples*1.5
      n+=1
    elif n==5:
      offspring+=couples*1
      n+=1
    elif n==6:
      offspring+=0
  return offspring
print(count_dom_phenotype([1,0,0,1,0,1]))

def source_rna(protein):

def splice_rna(dna,intron_list):
  rna=dna2rna(dna)
  for i in intron_list:
    while i in rna:
      rna=rna.replace(i,"")
  return rna